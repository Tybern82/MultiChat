#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BrimeAPI.com.brimelive.api.errors {

    /// <summary>
    /// Base class for exceptions generated in response to API requests. Catching this exception should catch all exceptions
    /// which may be generated by the API itself, however exceptions generated by the underlying transport will not necessarily
    /// be included.
    /// </summary>
    public class BrimeAPIException : Exception {

        /// <summary>
        /// Used to define the underlying API Error which has triggered this exception. 
        /// </summary>
        public BrimeAPIError Error { get; private set; }

        /// <summary>
        /// Constructs a new <c>Exception</c> for the given <c>BrimeAPIError</c>
        /// </summary>
        /// <param name="apiError">API Error which has triggered this</param>
        public BrimeAPIException(BrimeAPIError apiError) : base(apiError.ToString()) {
            this.Error = apiError;
        }

        /// <summary>
        /// Constructor used when creating an <c>Exception</c> based on an underlying <c>Exception</c>. This constructor is primarily
        /// for the <c>BrimeAPIMalformedResponse</c>, as this is not actually an API response Error, but is triggered when the actual
        /// API response contains invalid JSON or is missing required elements in the JSON response. This exception generally indicates
        /// that the current API does not fully match the API specification in this version of the library.
        /// </summary>
        /// <param name="apiError">API Error which has triggered this</param>
        /// <param name="baseException">An underlying Exception which may have caused the exception</param>
        public BrimeAPIException(BrimeAPIError apiError, Exception baseException) : base(apiError.ToString(), baseException) {
            this.Error = apiError;
        }

        /// <summary>
        /// Constructor used to support wrapping of transport exceptions into the API. Can be used to rethrow exceptions generated
        /// in sending/receiving API data. This is used to prevent exceptions generated by the current implementation from propagating
        /// outside this library. Wraps the base exception as an Internal Error for the API.
        /// </summary>
        /// <param name="baseException">Existing exception which has prevented correct response to API request</param>
        public BrimeAPIException(Exception baseException) : this(BrimeAPIError.lookupError("INTERNAL_ERROR: " + baseException.Message), baseException) { }
    }
}
