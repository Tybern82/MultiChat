#nullable enable

using System;
using System.Collections.Generic;
using System.Text;
using BrimeAPI.com.brimelive.api.errors;
using Newtonsoft.Json.Linq;

namespace BrimeAPI.com.brimelive.api {
    /// <summary>
    /// Response to API request. Provides access to API Notice information and any errors generated by the request.
    /// </summary>
    public class BrimeAPIResponse {
        /// <summary>Local NLog logging class.</summary>
        private static readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();

        /// <summary>
        /// Contains the JSON response for the request. 
        /// </summary>
        public JObject Data { get; private set; }

        /// <summary>
        /// List of <c>BrimeAPIError</c> entries returned by the request.
        /// </summary>
        public List<BrimeAPIError> Errors { get; private set; }

        /// <summary>
        /// Contains API Notice returned by the request. As per the API v1 specification: 
        /// <em>The <c>__notice</c> field will only be present when there is a notice, this will be used to notify 
        /// you of upcoming Api changes. You should implement an alert system internally to notify you 
        /// when this field is present.</em>
        /// </summary>
        public string __Notice { get; private set; }

        /// <summary>
        /// Constructor for API Response. Decodes any JSON response data, and identifies any error or notice components.
        /// </summary>
        /// <param name="json">JSON data returned by the API request.</param>
        /// <exception cref="BrimeAPIMalformedResponse">Thrown only if there is an issue processing the API Error response.</exception>
        public BrimeAPIResponse(string json) {
            // Process the JSON data 
            JObject apiResponse = JObject.Parse(json);

            // Identify whether there is an actual API response, or just load empty data response if none present.
            JObject? data = apiResponse.Value<JObject>("data");
            if (data == null) {
                Logger.Warn("Missing 'data' in JSON response");
                Data = JObject.Parse("{}");
            } else {
                Data = data;
            }

            // Identify whether there are any API errors. 
            JArray? apiErrors = apiResponse.Value<JArray>("errors");
            if (apiErrors != null) {
                Errors = new List<BrimeAPIError>(apiErrors.Count);
                foreach (JToken err in apiErrors) {
                    string? eMessage = err.ToObject<string>();
                    if (eMessage == null) {
                        Logger.Error("Unable to decode error in response");
                        throw new BrimeAPIMalformedResponse("Unable to decode error in response");
                    }
                    Errors.Add(BrimeAPIError.lookupError(eMessage));
                }
            } else {
                // No errors detected in response data
                Errors = new List<BrimeAPIError>();
            }
            // Log a warning if any error identified.
            if (Errors.Count > 0) {
                Logger.Warn(() => {
                    return String.Join<BrimeAPIError>(", ", Errors);
                });
            }

            // Identify whether there is any Notice in the API response. By default this will be logged.
            string? notice = apiResponse.Value<string>("__notice");
            __Notice = notice ?? "";
            if (!string.IsNullOrWhiteSpace(__Notice)) Logger.Info(() => { return "API-NOTICE: " + __Notice; });
        }
    }
}
